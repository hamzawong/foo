module rst_async_n(
    output  rst_async_n,
    
    input   rst_n,
    input   clk
    );
    
    reg rst_s1;
    reg rst_s2;
    
    always@(posedge clk or negedge rst_n) begin
        if(!rst_n) begin
            rst_s1  <=  1'b0;
            rst_s2  <=  1'b0;
        end
        else begin
            rst_s1  <=  1'b1;
            rst_s2  <=  rst_s1;
        end
    end
    
    assign  rst_async_n  =   rst_s2;
    
endmodule
//TB
module TB(

    );
    
    reg sys_clk;
    reg sys_rst_n;
    wire rst_async_n;
    
    initial begin
        sys_clk =   0;
        sys_rst_n   =   0;
        
        #22
        sys_rst_n   =   1;
        
        #55
        sys_rst_n   =   0;
        
        #44
        sys_rst_n   =   1;
    end
    
    always #10 sys_clk  =   ~sys_clk;
    
    rst_async_n u_rst_async_n(
        .rst_async_n(rst_async_n),
        .clk(sys_clk),
        .rst_n(sys_rst_n)
    );
    
endmodule
